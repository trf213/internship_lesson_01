[{"/Users/trf/Coding/React/internship_lesson_01/src/index.js":"1","/Users/trf/Coding/React/internship_lesson_01/src/reportWebVitals.js":"2","/Users/trf/Coding/React/internship_lesson_01/src/App.js":"3","/Users/trf/Coding/React/internship_lesson_01/src/context/Auth.js":"4","/Users/trf/Coding/React/internship_lesson_01/src/screens/Todo.js":"5","/Users/trf/Coding/React/internship_lesson_01/src/screens/Login.js":"6"},{"size":500,"mtime":1607041554325,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607013030603,"results":"9","hashOfConfig":"8"},{"size":1403,"mtime":1607352598654,"results":"10","hashOfConfig":"8"},{"size":765,"mtime":1607366860382,"results":"11","hashOfConfig":"8"},{"size":4194,"mtime":1607352598657,"results":"12","hashOfConfig":"8"},{"size":1654,"mtime":1607362027246,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wnlu2w",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/trf/Coding/React/internship_lesson_01/src/index.js",[],["29","30"],"/Users/trf/Coding/React/internship_lesson_01/src/reportWebVitals.js",[],"/Users/trf/Coding/React/internship_lesson_01/src/App.js",["31","32","33","34","35"],"\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Todo from './screens/Todo'\nimport Login from './screens/Login'\n\nimport { AuthProvider, AuthContext } from './context/Auth'\n\nconst App = () => {\n\n  // const currentUser = useContext(AuthContext)\n  return (\n    <AuthProvider>\n      <Router>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/todo\">Todo</Link>\n              </li>\n              {/* <li>Welcome back, {currentUser.name}</li> */}\n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/about\" component={About} />\n\n            <Route path=\"/todo\" component={Todo} />\n\n            <Route path=\"/\" component={Home} />\n\n          </Switch>\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nexport default App","/Users/trf/Coding/React/internship_lesson_01/src/context/Auth.js",["36"],"/Users/trf/Coding/React/internship_lesson_01/src/screens/Todo.js",["37"],"\nimport { useState, useEffect, useContext } from 'react'\nimport '../App.css';\n\nconst Todo = () => {\n\n    const [title, setTitle] = useState('')\n    const [tasks, setTasks] = useState([])\n    const [editableRowIndex, setEditableRow] = useState(-1)\n    const [editableField, setEditableField] = useState('')\n\n\n    useEffect(() => {\n        //Check if localstorage is\n        const storedTasks = JSON.parse(window.localStorage.getItem('tasks'))\n        console.log(storedTasks)\n        if (storedTasks?.length > 0) {\n            setTasks(storedTasks)\n        }\n    }, [])\n\n    //UseEffect re-renders application whenever dependency objects are changed\n    useEffect(() => {\n\n        //Save to localstorage whenever tasks is updated\n        if (tasks.length > 0) {\n            console.log('save tasks to localstorage')\n            window.localStorage.setItem('tasks', JSON.stringify(tasks))\n        }\n\n    }, [tasks])\n\n    //Update the state object whenever the field is changed\n    const handleFieldChange = (e) => {\n        const { value } = e.target\n        // console.log(value)\n        setTitle(value)\n    }\n\n    const handleEditFieldChange = (e) => {\n        const { value } = e.target\n        // console.log(value)\n        setEditableField(value)\n    }\n\n    //Handles saving to the tasks array\n    const handleSubmit = () => {\n        console.log('handle submit', title)\n        //TODO: Why didn't it re-render when creating the temp container??\n        // console.log(...tasks)\n        setTasks([...tasks, title])\n        setTitle('')\n    }\n\n    const toggleEditMode = (todoIndex) => {\n        //TODO: Edit todo using the es6 find\n        // console.log(tasks.findIndex((item, index) => todoIndex === index))\n        setEditableRow(todoIndex)\n    }\n\n    const handleSave = () => {\n        console.log('handle save', editableField)\n\n        const replaceIndex = tasks.findIndex((item, index) => editableRowIndex === index)\n        tasks[replaceIndex] = editableField\n        console.log(tasks)\n        setTasks([...tasks])\n        setEditableRow(-1)\n\n    }\n\n    const handleRemove = (todoIndex) => {\n        // console.log(todoIndex)\n        // console.log([...tasks.filter((item, index) => index !== todoIndex)])\n        //TODO: Remove todo using es6 filter\n        setTasks([...tasks.filter((item, index) => index !== todoIndex)])\n    }\n\n    return (\n        <div className=\"App\">\n            <div>\n                Welcome back\n                 {/* TODO: Display logged in user name here */}\n            </div>\n            <div>\n                <input\n                    type='text'\n                    name=\"task_title\"\n                    value={title}\n                    placeholder=\"Add task here\"\n                    onChange={handleFieldChange}\n                />\n                <button type=\"button\"\n                    onClick={handleSubmit}>\n                    Add task\n          </button>\n            </div>\n\n            <ul style={{ listStyle: 'none' }}>\n                {tasks?.length > 0 ? tasks.map((task, index) => (\n                    <li\n                        style={{ display: 'flex', justifyContent: 'space-between' }}\n                        key={index}\n                    >\n                        <input\n                            type='text'\n                            defaultValue={task}\n                            disabled={index !== editableRowIndex}\n                            onChange={handleEditFieldChange}\n                        />\n                        <div>\n                            {index !== editableRowIndex ? (\n                                <>\n                                    <button type=\"button\" onClick={() => toggleEditMode(index)}>Edit</button>\n                                    <button type=\"button\" onClick={() => handleRemove(index)}>Delete</button>\n                                </>\n                            ) : (\n                                    <button type=\"button\" onClick={handleSave}>Save Changes</button>\n                                )}\n\n                        </div>\n                    </li>\n                )) : \"Nothing in list\"}\n            </ul>\n        </div>\n    );\n}\n\nexport default Todo;\n","/Users/trf/Coding/React/internship_lesson_01/src/screens/Login.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":17,"nodeType":"44","messageId":"45","endLine":2,"endColumn":30},{"ruleId":"42","severity":1,"message":"46","line":2,"column":32,"nodeType":"44","messageId":"45","endLine":2,"endColumn":42},{"ruleId":"42","severity":1,"message":"47","line":2,"column":44,"nodeType":"44","messageId":"45","endLine":2,"endColumn":54},{"ruleId":"42","severity":1,"message":"48","line":13,"column":24,"nodeType":"44","messageId":"45","endLine":13,"endColumn":35},{"ruleId":"42","severity":1,"message":"49","line":62,"column":10,"nodeType":"44","messageId":"45","endLine":62,"endColumn":15},{"ruleId":"42","severity":1,"message":"46","line":1,"column":10,"nodeType":"44","messageId":"45","endLine":1,"endColumn":20},{"ruleId":"42","severity":1,"message":"46","line":2,"column":31,"nodeType":"44","messageId":"45","endLine":2,"endColumn":41},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'useReducer' is defined but never used.","'AuthContext' is defined but never used.","'Users' is defined but never used.","no-global-assign","no-unsafe-negation"]